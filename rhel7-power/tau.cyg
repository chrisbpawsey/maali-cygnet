##############################################################################
# maali cygnet file for scalasca
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF
TAU Performance SystemÂ® is a portable profiling and tracing toolkit for performance analysis of parallel programs written in Fortran, C, C++, UPC, Java, Python.
TAU (Tuning and Analysis Utilities) is capable of gathering performance information through instrumentation of functions, methods, basic blocks, and statements as well as event-based sampling. All C++ language features are supported including templates and namespaces. The API also provides selection of profiling groups for organizing and controlling instrumentation. The instrumentation can be inserted in the source code using an automatic instrumentor tool based on the Program Database Toolkit (PDT), dynamically using DyninstAPI, at runtime in the Java Virtual Machine, or manually using the instrumentation API.

To find out more check https://www.cs.uoregon.edu/research/tau/home.php

EOF

# URL to download the source code from
MAALI_URL="http://tau.uoregon.edu/$MAALI_TOOL_NAME.tgz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME.tgz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_PREREQ="pdtoolkit/3.25 cuda/9.2 openmpi/3.1.3 scorep/5.0-rc1 papi/5.6.0 opari2/2.0.4 python/3.7.2 "

# specify which compilers we want to build the tool with. We specify only compiler that work with CUDA build
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# add additional configure options
MAALI_TOOL_CONFIGURE="-arch=ibm64linux -c++=mpicxx -cc=mpicc -fortran=mpif90 -mpi "
MAALI_TOOL_CONFIGURE+="-opari "
MAALI_TOOL_CONFIGURE+="-bfd=download -unwind=download -pdt=\${MAALI_PDTOOLKIT_HOME} "
MAALI_TOOL_CONFIGURE+="-scorep=\${MAALI_SCOREP_HOME} "
MAALI_TOOL_CONFIGURE+="-papi=\${MAALI_PAPI_HOME} -cuda=\${MAALI_CUDA_HOME} "

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_MANPATH=1

##############################################################################

function maali_build {
#
MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

cd "$MAALI_TOOL_BUILD_DIR"

# # Making single precision version with type prefix
maali_run "./configure -prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL "
maali_run "make -j $MAALI_CORES install"

}
##############################################################################
