##############################################################################
# maali cygnet file for pdtoolkit
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

The Program Database Toolkit (PDT) is a tool infrastructure that provides
access to the high-level interface of source code for analysis tools and
applications.  Currently, the toolkit consists of the C/C++ and Fortran 77/90/95
IL (Intermediate Language) Analyzers, and DUCTAPE (C++ program Database 
Utilities and Conversion Tools APplication Environment) library and applica-
tions.  The EDG C++ (or Mutek Fortran 90) Front End first parses a source 
file, and produces an intermediate language file.  The appropriate IL 
Analyzer processes this IL file, and creates a "program database" (PDB) file 
consisting of the high-level interface of the original source.  Use of the 
DUCTAPE library then makes the contents of the PDB file accessible to 
applications. This release also includes the Flint F95 parser from Cleanscape 
Inc. 

See http://www.cs.uoregon.edu/research/pdt for more information 
on PDT.

EOF

# URL to download the source code from
MAALI_URL="http://tau.uoregon.edu/pdt.tgz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/pdt.tgz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_PREREQ=" "



# specify which compilers we want to build the tool with. We specify only compiler that work with CUDA build
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"



# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_MANPATH=1

##############################################################################


function maali_build {

if [[ ${COMPILER} == "gcc" ]]; then 
# add additional configure options
MAALI_TOOL_CONFIGURE="-GNU -arch=ibm64linux"
elif [[ ${COMPILER} == "xl" ]]; then 
MAALI_TOOL_CONFIGURE="-xlC -arch=ibm64linux"
fi

MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

cd "$MAALI_TOOL_BUILD_DIR"

# Making single precision version with type prefix
maali_run "./configure --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL "
maali_run "make -j $MAALI_CORES install"

}
##############################################################################